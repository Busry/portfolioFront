{"version":3,"sources":["components/names.js","components/head.js","App.js","serviceWorker.js","index.js"],"names":["Names","state","users","fetch","then","res","json","setState","className","this","map","user","key","id","username","Component","Head","href","src","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sOA0BeA,E,4MAvBXC,MAAQ,CACJC,MAAO,I,kEAGS,IAAD,OACfC,MAAM,UACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAF,GAAK,OAAI,EAAKK,SAAS,CACzBL,e,+BAIJ,OACI,6BACG,qCACA,wBAAIM,UAAU,MACTC,KAAKR,MAAMC,MAAMQ,KAAK,SAAAC,GAAI,OAAI,wBAAIC,IAAKD,EAAKE,IAAd,IAAoBF,EAAKG,SAAzB,c,GAjB9BC,aCiBLC,E,uKAfX,OACE,yBAAKH,GAAG,UACN,uBAAGI,KAAM,KACP,yBAAKC,IAAK,mBAAoBV,UAAW,OAAQW,IAAK,YAExD,yBACED,IAAK,sBACLV,UAAW,aACXW,IAAK,gB,GAVIJ,aCaJK,MATf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3be5bae1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Names extends Component {\r\n    state = {\r\n        users: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('/users')\r\n        .then(res => res.json())\r\n        .then(users => this.setState({\r\n            users\r\n        }));\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n               <h1>Users</h1> \r\n               <ul className='hi'>\r\n                   {this.state.users.map( user => <li key={user.id}> {user.username} </li> )}\r\n               </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Names\r\n","import React, { Component } from 'react';\r\n\r\nclass Head extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"header\">\r\n        <a href={'/'}>\r\n          <img src={'/images/logo.png'} className={'logo'} alt={'header'} />\r\n        </a>\r\n        <img\r\n          src={'/images/header2.png'}\r\n          className={'header_img'}\r\n          alt={'header'}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Head;\r\n","import React from 'react';\nimport './App.css';\n\nimport Names from './components/names';\nimport Head from './components/head';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Head />\n      <Names />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}